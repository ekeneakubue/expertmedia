// Prisma schema for an IT company with an Admin dashboard to manage users and clients

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// =====================
// Enums
// =====================

enum Role {
  ADMIN
  MANAGER
  STAFF
  CLIENT
}

enum UserStatus {
  ACTIVE
  INVITED
  SUSPENDED
  DISABLED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// =====================
// Models
// =====================

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  name         String
  role         Role       @default(STAFF)
  status       UserStatus @default(ACTIVE)
  lastLoginAt  DateTime?
  imageUrl     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  managedClients          Client[]                 @relation("AccountManagerClients")
  createdTickets          Ticket[]                 @relation("TicketCreatedBy")
  assignedTickets         Ticket[]                 @relation("TicketAssignedTo")
  auditLogs               AuditLog[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]

  // Indexes
  @@index([role])
  @@index([status])
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  industry    String?
  companySize Int?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Account manager assigned from Users table (optional)
  accountManagerId String?
  accountManager   User?   @relation("AccountManagerClients", fields: [accountManagerId], references: [id])

  // Relations
  projects Project[]
  tickets  Ticket[]

  // Indexes
  @@index([name])
  @@index([accountManagerId])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  clientId String
  client   Client   @relation(fields: [clientId], references: [id])
  tickets  Ticket[]

  // Indexes
  @@index([clientId])
  @@index([status])
}

model Ticket {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  dueAt       DateTime?

  // Relations
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  createdById String
  createdBy   User   @relation("TicketCreatedBy", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("TicketAssignedTo", fields: [assignedToId], references: [id])

  // Indexes
  @@index([clientId])
  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([assignedToId])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  metadata   Json?
  ipAddress  String?
  createdAt  DateTime @default(now())

  // Actor can be null for system actions
  actorId String?
  actor   User?   @relation(fields: [actorId], references: [id])

  @@index([entityType, entityId])
  @@index([actorId])
}

// Optional: email verification and password reset tokens
model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}
